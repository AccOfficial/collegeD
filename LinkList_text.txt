// Singly linklist

#include<iostream>
using namespace std;

struct Node { 
    int data; 
    struct Node* next; 
    // Pointer pointing towards next node
};

void insertFront (struct Node **head, int data)
{

  // dynamically create memory for this newNode
  struct Node *newNode = (struct Node *) malloc (sizeof (struct Node));

  // assign data value
  newNode->data = data;
  // change the next node of this newNode 
  // to current head of Linked List
  newNode->next = *head;

  //re-assign head to this newNode
  *head = newNode;
}

void deleteFront (struct Node **head)
{
  struct Node *temp = *head;

  // if there are no nodes in Linked List can't delete
  if (*head == NULL)
    {
      cout << "Linked List Empty, nothing to delete"; return; } // move head to next node *head = (*head)->next;
  cout << "Value deleted: " << temp->data << endl;
}

void display (struct Node *node)
{
  cout << "\n\n";
  // as linked list will end when Node is Null

  while (node != NULL)
    {
      cout << node->data << " "; node = node->next;
    }
  cout << "\n" << endl;
}

int main ()
{
  struct Node *head = NULL;

  // Need '&' i.e. address as we need to change head
  insertFront (&head, 6);
  insertFront (&head, 12);
  insertFront (&head, 18);
  insertFront (&head, 24);
  insertFront (&head, 30);

  // No '&' as head is not changed
  display (head);

  deleteFront (&head);
  deleteFront (&head);
  display (head);
  return 0;
}


// Doubly LinkList

#include <iostream>
using namespace std;
struct Node {
   int data;
   struct Node *prev;
   struct Node *next;
};
struct Node* head = NULL;
void insert(int newdata) {
   struct Node* newnode = (struct Node*) malloc(sizeof(struct Node));
   newnode->data = newdata;
   newnode->prev = NULL;
   newnode->next = head;
   if(head != NULL)
   head->prev = newnode ;
   head = newnode;
}
void display() {
   struct Node* ptr;
   ptr = head;
   while(ptr != NULL) {
      cout<< ptr->data <<" ";
      ptr = ptr->next;
   }
}
int main() {
   insert(3);
   insert(1);
   insert(7);
   insert(2);
   insert(9);
   cout<<"The doubly linked list is: ";
   display();
   return 0;
}


// Circular linklist

#include <iostream>
#include <stdlib.h>

struct node {
    int num;
    struct node * nextptr;
}*startnode;
 

void creation(int n);
void display();

int main() //main method
{
    int n;
    startnode = NULL;

    printf("Enter the number of nodes : ");
    scanf("%d", &n);
 
    creation(n); 
    display();
    return 0;
}

void creation(int n)//function to create list
{
    int i, num;
    struct node *preptr, *newnode;

    if(n >= 1)
    {
        startnode = (struct node *)malloc(sizeof(struct node));

        printf("Enter data for node 1 : ");
        scanf("%d", &num);
        startnode->num = num;
        startnode->nextptr = NULL;
        preptr = startnode;
        for(i=2; i<=n; i++)
        {
            newnode = (struct node *)malloc(sizeof(struct node));
            printf("Enter data for node %d : ", i);
            scanf("%d", &num);
            newnode->num = num;
            newnode->nextptr = NULL;	
            preptr->nextptr = newnode;	
            preptr = newnode;   		
        }
        preptr->nextptr = startnode; 		
    }
}

void display() //function to display list 
{
    struct node *tmp;
    int n,i;

    if(startnode == NULL)
    {
        printf("List is empty");
    }
    else
    {
        tmp = startnode;
        printf("\nData entered in the list are :\n");

      do {
            printf("Node %d : %d\n", n, tmp->num);

            tmp = tmp->nextptr;
            n++;
        }while(tmp != startnode);
    }
}
