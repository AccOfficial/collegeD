//Queues

#include<iostream> 
#include<conio.h> 
#define MAX 5


using namespace std;



/* 1. Node Template - Not required */



/* 2. Queue Template */ class OQueue
{

int a[MAX]; int front, rear;


public:

OQueue()

{

front = -1;

rear = -1;
 

}

void Enqueue(int x); void Dequeue(); void PeekFront(); void PeekRear(); void Display();
int Full(); int Empty();
};



/* 3. Functions */

//Enqueue

void OQueue :: Enqueue(int x)

{

if(Full())

{

cout << "Queue Overflow!"; return;
}



if(front == -1) //first element in the queue

{

front++;

}



rear++; a[rear] = x;
}
 



int OQueue :: Full()

{

return (rear == MAX-1?1:0);

}



//Dequeue

void OQueue :: Dequeue()

{

if(Empty())

{

cout << "Queue Underflow!"; return;
}



int t = a[front];



if(front == rear) //single element

{

front = -1;

rear = -1;

}

else

{

front++;

}



cout << "Element removed is: " << t;
 

}



int OQueue :: Empty()

{

return (front == -1?1:0);

}



//Peekfront

void OQueue :: PeekFront()

{

if(Empty())

{

cout << "Queue Underflow!"; return;
}



cout << "Element at front is: " << a[front];

}



//PeekRear

void OQueue :: PeekRear()

{

if(Empty())

{

cout << "Queue Underflow!"; return;
}
 

cout << "Element at end is: " << a[rear];

}



//Display

void OQueue :: Display()

{

if(Empty())

{

cout << "Queue Underflow!"; return;
}



for (int i=front; i<=rear; i++)

{

cout << a[i] << " ";

}

}



/* 4. menu */ int main()
{

int ch, num; OQueue q;


while(1)

{

system("cls");
 

cout <<"***Ordinary Queue ***\n\n";



cout << "1. Enqueue an element" << endl; cout << "2. Dequeue" << endl;
cout << "3. Peek Front" << endl; cout << "4. Peek Rear" << endl;
cout << "5. Display the queue" << endl; cout << "6. Exit" << endl;


cout << "\nEnter your choice: "; cin >> ch;


switch(ch)

{

case 1:

cout << "Enter an element: "; cin >> num; q.Enqueue(num);


getch(); break;
case 2:

q.Dequeue();



getch(); break;
case 3:

q.PeekFront();
 



getch(); break;
case 4:

q.PeekRear();



getch(); break;
case 5:

q.Display();



getch(); break;
case 6:

exit(1);



default:

cout << "incorrect choice!"; getch();
break;

}//end of switch

}//end of while

} //end of main


// Circular Queue

#include<iostream> #include<conio.h> #define MAX 5


using namespace std;



/* 1. Node template = not required */



/* 2. Queue Template */ class CQueue
{

int a[MAX]; int front, rear; int cnt;


public:

CQueue()
 

{

front = rear = -1; cnt = 0;
}

void Enqueue(int x); void Dequeue(); void PeekFront(); void PeekRear(); void Display();
int Full(); int Empty();
};



/* 3. functions */

//Enqueue

void CQueue :: Enqueue(int x)

{

if (Full())

{

cout << "Queue Overflow!"; return;
}



if(front == -1) //first element in the list

{

front++;

}
 

rear = (rear + 1)%MAX; a[rear] = x;
cnt++;

}



int CQueue :: Full()

{

return(cnt == MAX?1:0);

}



//Dequeue

void CQueue :: Dequeue()

{

if(Empty())

{

cout << "Queue Underflow!"; return;
}



int t = a[front];



if(front == rear) //single element

{

front = -1;

rear = -1;

}

else

{
 

front = (front+1)%MAX;

}



cout << "Element removed is: " << t; cnt--;
}



int CQueue :: Empty()

{

return(cnt == 0?1:0);

}



//Peekfront

void CQueue :: PeekFront()

{

if(Empty())

{

cout << "Queue Underflow!"; return;
}



cout << "Element at front is: " << a[front];

}



//PeekRear

void CQueue :: PeekRear()

{

if(Empty())
 

{

cout << "Queue Underflow!"; return;
}



cout << "Element at end is: " << a[rear];

}



//Display

void CQueue :: Display()

{

if(Empty())

{

cout << "Queue Underflow!"; return;
}



int x, i = front;



for(x=1; x<=cnt; x++)

{

cout << a[i] << " "; i = (i+1)%MAX;
}

}



/* 4. Menu */ int main()
 

{

int num, ch; CQueue c;


while(1)

{

system("cls");

cout << "***Circular Queue***\n\n";



cout << "1. Enqueue an element" << endl; cout << "2. Dequeue" << endl;
cout << "3. Peek Front" << endl; cout << "4. Peek Rear" << endl;
cout << "5. Display the queue" << endl; cout << "6. Exit" << endl;
cout << "\nEnter your choice: "; cin >> ch;


switch(ch)

{

case 1:

cout << "Enter an element: "; cin >> num; c.Enqueue(num);


getch(); break;
 

case 2:

c.Dequeue();



getch(); break;


case 3:

c.PeekFront();



getch(); break;


case 4:

c.PeekRear();



getch(); break;


case 5:

c.Display();

getch(); break;


case 6:

exit(1);



default:

cout << "Incorrect Choice!";
 

getch(); break;
}//end of switch

}//end of while

}//end of main



// Double ended queue

https://www.softwaretestinghelp.com/deque-in-cpp/



// Priority Queue

https://www.programiz.com/cpp-programming/priority-queue


