// Array Based

#include<iostream> #include<conio.h> #define MAX 5

using namespace std;

/* Node Template - Not Required */

/* Stack Template */ class AStack
{
int a[MAX]; int tos;

 
public:
 

AStack()
{
 
tos = -1;
}

void Push(int x); void Pop();
void Peek(); void Display(); int Full();
int Empty();
};

/* Functions */
//Push
void AStack :: Push(int x)
{
if(Full())
{
 

}
else
{


}
}
 
cout << "Stack Overflow!" << endl;


tos++; a[tos] = x;
 

int AStack :: Full()
{
 

if(tos == MAX-1)
{
 

}
else
{

}
}
 
return 1;


return 0;
 

//pop
void AStack :: Pop()
{
if(Empty())
{
 

}
else
{


}
}
 
cout << "Stack Underflow!" << endl;


int t = a[tos]; tos--;
cout << "Element popped is: " << t << endl;
 

int AStack :: Empty()
{
if(tos == -1)
{
 

}
else
{

}
}
 
return 1;


return 0;
 

//Peek
void AStack :: Peek()
{
if(Empty())
{
 

}
else
{

}
}
 
cout << "Stack Underflow!" << endl;


cout << "Element at tos is: " << a[tos] << endl;
 

//Display
void AStack :: Display()
{
if(Empty())
 

 
{

}
else
{
 

cout << "Stack Underflow!" << endl;

cout << "Stack Contains: \n"; for(int i=tos; i>=0; i--)
{
 
cout << a[i] << endl;
}
}
}
/* Menu */ int main()
{
int ch, num; AStack s;

while(1)
{
system("cls");
cout << "***Array Based Stack***\n\n";

cout << "1. Push an element" << endl; cout << "2. Pop an element" << endl; cout << "3. Peek at the stack" << endl; cout << "4. Display the stack" << endl; cout << "5. Exit" << endl;

cout << "\nEnter your choice: "; cin >> ch;

switch(ch)
{
 
case 1:
 

cout << "Enter a value: "; cin >> num; s.Push(num);

getch(); break;
 

 
case 2:
 

s.Pop();

getch(); break;
 

 
case 3:
 

s.Peek();
getch(); break;
 

 
case 4:
 

s.Display();
getch(); break;
 

case 5:
exit(1);

default:
cout << "Incorrect Option"; getch();
} //end of switch
}// end of while
}//end of main


// Link Based Stack

#include<iostream> #include<conio.h>

using namespace std;

/* Node Template */ class SNode
{
public:
int data; SNode *next;
};

/* Stack Template */ class LStack
{
SNode *tos;

 
public:
 

LStack()
{
 
tos = NULL;
}
void Push(int x); void Pop();
void Peek(); void Display();
};

/* Functions */
//Push
void LStack :: Push(int x)
{
//Create a node
SNode *t = new SNode(); t->data = x;
t->next = NULL;

//First Node if(tos == NULL)
{
tos = t;
}
else // Insert at the head
{
 

t->next = tos; tos = t;
}
}

//Pop
void LStack :: Pop()
{
if(tos == NULL)
{
 

}
else
{
 
cout << "Stack Underflow!";


SNode *t = tos; tos = tos->next;
 

cout << "Element popped is: " << t->data; delete t;
}
}

//Peek
void LStack :: Peek()
{
if(tos == NULL)
{
 

}
else
{

}
}
 
cout << "Stack Underflow!";


cout << "Element at tos is: " << tos->data;
 

//Display
void LStack :: Display()
{
if(tos == NULL)
{
 

}
else
{
 
cout << "Stack Underflow!";


cout << "Stack contains: \n";

SNode *tmp = tos; while(tmp != NULL)
{
 
cout << tmp->data << " -> " << endl; tmp = tmp->next;
}
cout << "NULL";
}
 

}

/* Menu */ int main()
{
int ch, num; LStack L;

while(1)
{
system("cls");

cout << "***List Based Stack***\n" << endl;

cout << "1. Push an element" << endl; cout << "2. Pop an element" << endl; cout << "3. Peek at the stack" << endl; cout << "4. Display the stack" << endl; cout << "5. Exit" << endl;

cout << "\nEnter your choice: "; cin >> ch;

switch(ch)
{
case 1:
cout << "Enter the value: "; cin >> num;
L.Push(num);

getch(); break;

 
case 2:
 

L.Pop();

getch(); break;
 

 
case 3:
 

L.Peek();

getch(); break;
 

 
case 4:
 

L.Display();

getch(); break;
 

case 5:
exit(1);
 


default:
cout << "Incorrect option"; getch();
}//end of switch
}//end of while
}//end of main


// Balancing of parenthesis

#include<bits/stdc++.h> 
using namespace std; 

bool balance(string expr) 
{ 
    stack<char> s; 
    char x; 
 
    for (int i=0; i<expr.length(); i++) 
    { 
        if (expr[i]=='('||expr[i]=='['||expr[i]=='{') 
        { 
            s.push(expr[i]); 
            continue; 
        } 

        if (s.empty()) 
           return false; 
  
        switch (expr[i]) 
        { 
        case ')': 
            x = s.top(); 
            s.pop(); 
            if (x=='{' || x=='[') 
                return false; 
            break; 
  
        case '}': 
  
            x = s.top(); 
            s.pop(); 
            if (x=='(' || x=='[') 
                return false; 
            break; 
  
        case ']': 

            x = s.top(); 
            s.pop(); 
            if (x =='(' || x == '{') 
                return false; 
            break; 
        } 
    } 
    return (s.empty()); 
} 

int main() 
{
  string expr;
  cout<<"Enter a string : ";
  cin>>expr;
    if (balance(expr)) 
        cout << "Balanced"; 
    else
        cout << "Not Balanced"; 
    return 0; 
}

